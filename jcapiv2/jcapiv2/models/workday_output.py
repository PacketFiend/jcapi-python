# coding: utf-8

"""
    JumpCloud APIs

    V1 & V2 versions of JumpCloud's API. The next version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings. The most recent version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkdayOutput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, report_url=None, last_import=None):
        """
        WorkdayOutput - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'report_url': 'str',
            'last_import': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'report_url': 'reportUrl',
            'last_import': 'lastImport'
        }

        self._id = id
        self._name = name
        self._report_url = report_url
        self._last_import = last_import

    @property
    def id(self):
        """
        Gets the id of this WorkdayOutput.

        :return: The id of this WorkdayOutput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WorkdayOutput.

        :param id: The id of this WorkdayOutput.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this WorkdayOutput.

        :return: The name of this WorkdayOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorkdayOutput.

        :param name: The name of this WorkdayOutput.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def report_url(self):
        """
        Gets the report_url of this WorkdayOutput.

        :return: The report_url of this WorkdayOutput.
        :rtype: str
        """
        return self._report_url

    @report_url.setter
    def report_url(self, report_url):
        """
        Sets the report_url of this WorkdayOutput.

        :param report_url: The report_url of this WorkdayOutput.
        :type: str
        """
        if report_url is None:
            raise ValueError("Invalid value for `report_url`, must not be `None`")

        self._report_url = report_url

    @property
    def last_import(self):
        """
        Gets the last_import of this WorkdayOutput.

        :return: The last_import of this WorkdayOutput.
        :rtype: str
        """
        return self._last_import

    @last_import.setter
    def last_import(self, last_import):
        """
        Sets the last_import of this WorkdayOutput.

        :param last_import: The last_import of this WorkdayOutput.
        :type: str
        """
        if last_import is None:
            raise ValueError("Invalid value for `last_import`, must not be `None`")

        self._last_import = last_import

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkdayOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    JumpCloud APIs

    V1 & V2 versions of JumpCloud's API. The next version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings. The most recent version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorkdayInput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, report_url=None, name=None, oauth=None):
        """
        WorkdayInput - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'report_url': 'str',
            'name': 'str',
            'oauth': 'OauthCodeInput'
        }

        self.attribute_map = {
            'report_url': 'reportUrl',
            'name': 'name',
            'oauth': 'oauth'
        }

        self._report_url = report_url
        self._name = name
        self._oauth = oauth

    @property
    def report_url(self):
        """
        Gets the report_url of this WorkdayInput.

        :return: The report_url of this WorkdayInput.
        :rtype: str
        """
        return self._report_url

    @report_url.setter
    def report_url(self, report_url):
        """
        Sets the report_url of this WorkdayInput.

        :param report_url: The report_url of this WorkdayInput.
        :type: str
        """

        self._report_url = report_url

    @property
    def name(self):
        """
        Gets the name of this WorkdayInput.

        :return: The name of this WorkdayInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorkdayInput.

        :param name: The name of this WorkdayInput.
        :type: str
        """

        self._name = name

    @property
    def oauth(self):
        """
        Gets the oauth of this WorkdayInput.

        :return: The oauth of this WorkdayInput.
        :rtype: OauthCodeInput
        """
        return self._oauth

    @oauth.setter
    def oauth(self, oauth):
        """
        Sets the oauth of this WorkdayInput.

        :param oauth: The oauth of this WorkdayInput.
        :type: OauthCodeInput
        """

        self._oauth = oauth

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkdayInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    JumpCloud APIs

    V1 & V2 versions of JumpCloud's API. The next version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings. The most recent version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PolicyTemplateConfigField(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, display_type=None, label=None, name=None, position=None, read_only=None, required=None):
        """
        PolicyTemplateConfigField - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'display_type': 'str',
            'label': 'str',
            'name': 'str',
            'position': 'float',
            'read_only': 'bool',
            'required': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'display_type': 'displayType',
            'label': 'label',
            'name': 'name',
            'position': 'position',
            'read_only': 'readOnly',
            'required': 'required'
        }

        self._id = id
        self._display_type = display_type
        self._label = label
        self._name = name
        self._position = position
        self._read_only = read_only
        self._required = required

    @property
    def id(self):
        """
        Gets the id of this PolicyTemplateConfigField.
        ObjectId uniquely identifying a Policy Template Configuration Field

        :return: The id of this PolicyTemplateConfigField.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PolicyTemplateConfigField.
        ObjectId uniquely identifying a Policy Template Configuration Field

        :param id: The id of this PolicyTemplateConfigField.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def display_type(self):
        """
        Gets the display_type of this PolicyTemplateConfigField.
        The default rendering for this field.

        :return: The display_type of this PolicyTemplateConfigField.
        :rtype: str
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """
        Sets the display_type of this PolicyTemplateConfigField.
        The default rendering for this field.

        :param display_type: The display_type of this PolicyTemplateConfigField.
        :type: str
        """
        allowed_values = ["checkbox", "date", "email", "number", "select", "text", "textarea"]
        if display_type not in allowed_values:
            raise ValueError(
                "Invalid value for `display_type` ({0}), must be one of {1}"
                .format(display_type, allowed_values)
            )

        self._display_type = display_type

    @property
    def label(self):
        """
        Gets the label of this PolicyTemplateConfigField.
        The default label for this field.

        :return: The label of this PolicyTemplateConfigField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this PolicyTemplateConfigField.
        The default label for this field.

        :param label: The label of this PolicyTemplateConfigField.
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """
        Gets the name of this PolicyTemplateConfigField.
        A unique name identifying this config field.

        :return: The name of this PolicyTemplateConfigField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PolicyTemplateConfigField.
        A unique name identifying this config field.

        :param name: The name of this PolicyTemplateConfigField.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def position(self):
        """
        Gets the position of this PolicyTemplateConfigField.
        The default position to render this field.

        :return: The position of this PolicyTemplateConfigField.
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this PolicyTemplateConfigField.
        The default position to render this field.

        :param position: The position of this PolicyTemplateConfigField.
        :type: float
        """

        self._position = position

    @property
    def read_only(self):
        """
        Gets the read_only of this PolicyTemplateConfigField.
        If an admin is allowed to modify this field.

        :return: The read_only of this PolicyTemplateConfigField.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """
        Sets the read_only of this PolicyTemplateConfigField.
        If an admin is allowed to modify this field.

        :param read_only: The read_only of this PolicyTemplateConfigField.
        :type: bool
        """

        self._read_only = read_only

    @property
    def required(self):
        """
        Gets the required of this PolicyTemplateConfigField.
        If this field is required for this field.

        :return: The required of this PolicyTemplateConfigField.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this PolicyTemplateConfigField.
        If this field is required for this field.

        :param required: The required of this PolicyTemplateConfigField.
        :type: bool
        """

        self._required = required

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PolicyTemplateConfigField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    JumpCloud APIs

    V1 & V2 versions of JumpCloud's API. The next version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings. The most recent version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class JobWorkresult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'str',
        'status_msg': 'str',
        'meta': 'object',
        'created_at': 'str',
        'updated_at': 'str',
        'persisted_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'status_msg': 'statusMsg',
        'meta': 'meta',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'persisted_fields': 'persistedFields'
    }

    def __init__(self, id=None, status=None, status_msg=None, meta=None, created_at=None, updated_at=None, persisted_fields=None):
        """
        JobWorkresult - a model defined in Swagger
        """

        self._id = None
        self._status = None
        self._status_msg = None
        self._meta = None
        self._created_at = None
        self._updated_at = None
        self._persisted_fields = None

        if id is not None:
          self.id = id
        if status is not None:
          self.status = status
        if status_msg is not None:
          self.status_msg = status_msg
        if meta is not None:
          self.meta = meta
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if persisted_fields is not None:
          self.persisted_fields = persisted_fields

    @property
    def id(self):
        """
        Gets the id of this JobWorkresult.

        :return: The id of this JobWorkresult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this JobWorkresult.

        :param id: The id of this JobWorkresult.
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """
        Gets the status of this JobWorkresult.

        :return: The status of this JobWorkresult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this JobWorkresult.

        :param status: The status of this JobWorkresult.
        :type: str
        """

        self._status = status

    @property
    def status_msg(self):
        """
        Gets the status_msg of this JobWorkresult.

        :return: The status_msg of this JobWorkresult.
        :rtype: str
        """
        return self._status_msg

    @status_msg.setter
    def status_msg(self, status_msg):
        """
        Sets the status_msg of this JobWorkresult.

        :param status_msg: The status_msg of this JobWorkresult.
        :type: str
        """

        self._status_msg = status_msg

    @property
    def meta(self):
        """
        Gets the meta of this JobWorkresult.

        :return: The meta of this JobWorkresult.
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """
        Sets the meta of this JobWorkresult.

        :param meta: The meta of this JobWorkresult.
        :type: object
        """

        self._meta = meta

    @property
    def created_at(self):
        """
        Gets the created_at of this JobWorkresult.

        :return: The created_at of this JobWorkresult.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this JobWorkresult.

        :param created_at: The created_at of this JobWorkresult.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this JobWorkresult.

        :return: The updated_at of this JobWorkresult.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this JobWorkresult.

        :param updated_at: The updated_at of this JobWorkresult.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def persisted_fields(self):
        """
        Gets the persisted_fields of this JobWorkresult.

        :return: The persisted_fields of this JobWorkresult.
        :rtype: object
        """
        return self._persisted_fields

    @persisted_fields.setter
    def persisted_fields(self, persisted_fields):
        """
        Sets the persisted_fields of this JobWorkresult.

        :param persisted_fields: The persisted_fields of this JobWorkresult.
        :type: object
        """

        self._persisted_fields = persisted_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, JobWorkresult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

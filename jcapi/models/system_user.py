# coding: utf-8

"""
    JumpCloud Directory API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SystemUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, account_locked=None, activated=None, allow_public_key=None, associated_tag_count=None, email=None, enable_managed_uid=None, enable_user_portal_multifactor=None, externally_managed=None, firstname=None, lastname=None, ldap_binding_user=None, password_expired=None, passwordless_sudo=None, ssh_keys=None, sudo=None, totp_enabled=None, unix_guid=None, unix_uid=None, username=None):
        """
        SystemUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'account_locked': 'bool',
            'activated': 'bool',
            'allow_public_key': 'bool',
            'associated_tag_count': 'str',
            'email': 'str',
            'enable_managed_uid': 'bool',
            'enable_user_portal_multifactor': 'bool',
            'externally_managed': 'bool',
            'firstname': 'str',
            'lastname': 'str',
            'ldap_binding_user': 'bool',
            'password_expired': 'bool',
            'passwordless_sudo': 'bool',
            'ssh_keys': 'list[ERRORUNKNOWN]',
            'sudo': 'bool',
            'totp_enabled': 'str',
            'unix_guid': 'int',
            'unix_uid': 'int',
            'username': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'account_locked': 'account_locked',
            'activated': 'activated',
            'allow_public_key': 'allow_public_key',
            'associated_tag_count': 'associatedTagCount',
            'email': 'email',
            'enable_managed_uid': 'enable_managed_uid',
            'enable_user_portal_multifactor': 'enable_user_portal_multifactor',
            'externally_managed': 'externally_managed',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'ldap_binding_user': 'ldap_binding_user',
            'password_expired': 'password_expired',
            'passwordless_sudo': 'passwordless_sudo',
            'ssh_keys': 'ssh_keys',
            'sudo': 'sudo',
            'totp_enabled': 'totp_enabled',
            'unix_guid': 'unix_guid',
            'unix_uid': 'unix_uid',
            'username': 'username'
        }

        self._id = id
        self._account_locked = account_locked
        self._activated = activated
        self._allow_public_key = allow_public_key
        self._associated_tag_count = associated_tag_count
        self._email = email
        self._enable_managed_uid = enable_managed_uid
        self._enable_user_portal_multifactor = enable_user_portal_multifactor
        self._externally_managed = externally_managed
        self._firstname = firstname
        self._lastname = lastname
        self._ldap_binding_user = ldap_binding_user
        self._password_expired = password_expired
        self._passwordless_sudo = passwordless_sudo
        self._ssh_keys = ssh_keys
        self._sudo = sudo
        self._totp_enabled = totp_enabled
        self._unix_guid = unix_guid
        self._unix_uid = unix_uid
        self._username = username


    @property
    def id(self):
        """
        Gets the id of this SystemUser.
        ObjectId for the systemuser

        :return: The id of this SystemUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SystemUser.
        ObjectId for the systemuser

        :param id: The id of this SystemUser.
        :type: str
        """

        self._id = id

    @property
    def account_locked(self):
        """
        Gets the account_locked of this SystemUser.


        :return: The account_locked of this SystemUser.
        :rtype: bool
        """
        return self._account_locked

    @account_locked.setter
    def account_locked(self, account_locked):
        """
        Sets the account_locked of this SystemUser.


        :param account_locked: The account_locked of this SystemUser.
        :type: bool
        """

        self._account_locked = account_locked

    @property
    def activated(self):
        """
        Gets the activated of this SystemUser.


        :return: The activated of this SystemUser.
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """
        Sets the activated of this SystemUser.


        :param activated: The activated of this SystemUser.
        :type: bool
        """

        self._activated = activated

    @property
    def allow_public_key(self):
        """
        Gets the allow_public_key of this SystemUser.


        :return: The allow_public_key of this SystemUser.
        :rtype: bool
        """
        return self._allow_public_key

    @allow_public_key.setter
    def allow_public_key(self, allow_public_key):
        """
        Sets the allow_public_key of this SystemUser.


        :param allow_public_key: The allow_public_key of this SystemUser.
        :type: bool
        """

        self._allow_public_key = allow_public_key

    @property
    def associated_tag_count(self):
        """
        Gets the associated_tag_count of this SystemUser.


        :return: The associated_tag_count of this SystemUser.
        :rtype: str
        """
        return self._associated_tag_count

    @associated_tag_count.setter
    def associated_tag_count(self, associated_tag_count):
        """
        Sets the associated_tag_count of this SystemUser.


        :param associated_tag_count: The associated_tag_count of this SystemUser.
        :type: str
        """

        self._associated_tag_count = associated_tag_count

    @property
    def email(self):
        """
        Gets the email of this SystemUser.


        :return: The email of this SystemUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this SystemUser.


        :param email: The email of this SystemUser.
        :type: str
        """

        self._email = email

    @property
    def enable_managed_uid(self):
        """
        Gets the enable_managed_uid of this SystemUser.


        :return: The enable_managed_uid of this SystemUser.
        :rtype: bool
        """
        return self._enable_managed_uid

    @enable_managed_uid.setter
    def enable_managed_uid(self, enable_managed_uid):
        """
        Sets the enable_managed_uid of this SystemUser.


        :param enable_managed_uid: The enable_managed_uid of this SystemUser.
        :type: bool
        """

        self._enable_managed_uid = enable_managed_uid

    @property
    def enable_user_portal_multifactor(self):
        """
        Gets the enable_user_portal_multifactor of this SystemUser.


        :return: The enable_user_portal_multifactor of this SystemUser.
        :rtype: bool
        """
        return self._enable_user_portal_multifactor

    @enable_user_portal_multifactor.setter
    def enable_user_portal_multifactor(self, enable_user_portal_multifactor):
        """
        Sets the enable_user_portal_multifactor of this SystemUser.


        :param enable_user_portal_multifactor: The enable_user_portal_multifactor of this SystemUser.
        :type: bool
        """

        self._enable_user_portal_multifactor = enable_user_portal_multifactor

    @property
    def externally_managed(self):
        """
        Gets the externally_managed of this SystemUser.


        :return: The externally_managed of this SystemUser.
        :rtype: bool
        """
        return self._externally_managed

    @externally_managed.setter
    def externally_managed(self, externally_managed):
        """
        Sets the externally_managed of this SystemUser.


        :param externally_managed: The externally_managed of this SystemUser.
        :type: bool
        """

        self._externally_managed = externally_managed

    @property
    def firstname(self):
        """
        Gets the firstname of this SystemUser.


        :return: The firstname of this SystemUser.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this SystemUser.


        :param firstname: The firstname of this SystemUser.
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """
        Gets the lastname of this SystemUser.


        :return: The lastname of this SystemUser.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this SystemUser.


        :param lastname: The lastname of this SystemUser.
        :type: str
        """

        self._lastname = lastname

    @property
    def ldap_binding_user(self):
        """
        Gets the ldap_binding_user of this SystemUser.


        :return: The ldap_binding_user of this SystemUser.
        :rtype: bool
        """
        return self._ldap_binding_user

    @ldap_binding_user.setter
    def ldap_binding_user(self, ldap_binding_user):
        """
        Sets the ldap_binding_user of this SystemUser.


        :param ldap_binding_user: The ldap_binding_user of this SystemUser.
        :type: bool
        """

        self._ldap_binding_user = ldap_binding_user

    @property
    def password_expired(self):
        """
        Gets the password_expired of this SystemUser.


        :return: The password_expired of this SystemUser.
        :rtype: bool
        """
        return self._password_expired

    @password_expired.setter
    def password_expired(self, password_expired):
        """
        Sets the password_expired of this SystemUser.


        :param password_expired: The password_expired of this SystemUser.
        :type: bool
        """

        self._password_expired = password_expired

    @property
    def passwordless_sudo(self):
        """
        Gets the passwordless_sudo of this SystemUser.


        :return: The passwordless_sudo of this SystemUser.
        :rtype: bool
        """
        return self._passwordless_sudo

    @passwordless_sudo.setter
    def passwordless_sudo(self, passwordless_sudo):
        """
        Sets the passwordless_sudo of this SystemUser.


        :param passwordless_sudo: The passwordless_sudo of this SystemUser.
        :type: bool
        """

        self._passwordless_sudo = passwordless_sudo

    @property
    def ssh_keys(self):
        """
        Gets the ssh_keys of this SystemUser.


        :return: The ssh_keys of this SystemUser.
        :rtype: list[ERRORUNKNOWN]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """
        Sets the ssh_keys of this SystemUser.


        :param ssh_keys: The ssh_keys of this SystemUser.
        :type: list[ERRORUNKNOWN]
        """

        self._ssh_keys = ssh_keys

    @property
    def sudo(self):
        """
        Gets the sudo of this SystemUser.


        :return: The sudo of this SystemUser.
        :rtype: bool
        """
        return self._sudo

    @sudo.setter
    def sudo(self, sudo):
        """
        Sets the sudo of this SystemUser.


        :param sudo: The sudo of this SystemUser.
        :type: bool
        """

        self._sudo = sudo

    @property
    def totp_enabled(self):
        """
        Gets the totp_enabled of this SystemUser.


        :return: The totp_enabled of this SystemUser.
        :rtype: str
        """
        return self._totp_enabled

    @totp_enabled.setter
    def totp_enabled(self, totp_enabled):
        """
        Sets the totp_enabled of this SystemUser.


        :param totp_enabled: The totp_enabled of this SystemUser.
        :type: str
        """

        self._totp_enabled = totp_enabled

    @property
    def unix_guid(self):
        """
        Gets the unix_guid of this SystemUser.


        :return: The unix_guid of this SystemUser.
        :rtype: int
        """
        return self._unix_guid

    @unix_guid.setter
    def unix_guid(self, unix_guid):
        """
        Sets the unix_guid of this SystemUser.


        :param unix_guid: The unix_guid of this SystemUser.
        :type: int
        """

        self._unix_guid = unix_guid

    @property
    def unix_uid(self):
        """
        Gets the unix_uid of this SystemUser.


        :return: The unix_uid of this SystemUser.
        :rtype: int
        """
        return self._unix_uid

    @unix_uid.setter
    def unix_uid(self, unix_uid):
        """
        Sets the unix_uid of this SystemUser.


        :param unix_uid: The unix_uid of this SystemUser.
        :type: int
        """

        self._unix_uid = unix_uid

    @property
    def username(self):
        """
        Gets the username of this SystemUser.


        :return: The username of this SystemUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this SystemUser.


        :param username: The username of this SystemUser.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
